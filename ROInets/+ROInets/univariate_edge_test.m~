function [T, p, corrp] = univariate_edge_test(netmats, designMatrix, contrasts, resultsDir, standardise)
%UNIVARIATE_EDGE_TEST permutation test for group-level stats on networks



%% Input checking
[nNodes, checkMe, nSessions] = size(netmats);
assert(checkMe == nNodes, ...
       [mfilename ':NonsquareInput'], ...
       'Input netmats must be square, with subjects in the third dimension. \n');
   
[checkMe, nEVs] = size(designMatrix);
assert(checkMe == nSessions, ...
       [mfilename ':BadDesign'], ...
       'Design matrix must have as many rows as subjects. \n');
   
[nContrasts, checkMe] = size(contrasts);
assert(checkMe == nEVs, ...
       [mfilename ':BadContrasts'], ...
       'Contrasts must have as many columns as EVs in the design matrix. \n');

% ROInets.make_directory(resultsDir);
resultsDir = tempDir;

%% Construct design matrix
if standardise, 
    % demean and variance normalise
    X = bsxfun(@rdivide, bsxfun(@minus, designMatrix, mean(designMatrix)), ...
                         std(designMatrix));
else
    X = designMatrix;
end%if

% save out
designFile = fullfile(resultsDir, 'univariate_edge_test_design.mat');
ROInets.save_vest(X, designFile);
Cd = onCleanup(@() delete(designFile));

%% Construct contrasts
contrastFile = fullfile(resultsDir, 'univariate_edge_test_design.con');
ROInets.save_vest(contrasts, contrastFile);
Cc = onCleanup(@() delete(contrastFile));

%% Save out edges into nifti
inputNifti = fullfile(resultsDir, 'network_edges.nii.gz');
edges      = ROInets.get_edges(netmats); % note this assumes symmetry
for iS = ROInets.cols(edges):-1:1,
    formattedEdges(:,1,1,iS) = edges(:,iS);
end
save_avw(formattedEdges, inputNifti, 'f', [1 1 1 1]);
Ci = onCleanup(@() delete(inputNifti));

%% Run randomise
outputNifti = fullfile(resultsDir, 'univariate_edge_test');

% call to randomise
command = sprintf('randomise -i %s -o %s -d %s -t %s -x', ...
                  inputNifti, outputNifti, designFile, contrastFile);
              
% submit to terminal
fprintf('%s\n', command);
[status, result] = system(command);
if status, 
    error([mfilename ':systemCallFailed'], ...
          'System command failed with message: \n   %s \n', result);
end

%% Retrieve results
for iCon = nContrasts:-1:1,
   TstatFile     = [outputNifti '_tstat' num2str(iCon) '.nii.gz'];
   T(:,iCon)     = read_avw (TstatFile);
   pFile         = [outputNifti '_vox_p_tstat' num2str(iCon) '.nii.gz'];
   p(:,iCon)     = read_avw (pFile);
   corrpFile     = [outputNifti '_vox_corrp_tstat' num2str(iCon) '.nii.gz'];
   corrp(:,iCon) = read_avw (corrpFile);
end

% convert back to symmetric matrices
T = ROInets.unvectorize(T);
p = ROInets.unvectorize(p);
corrp = ROInets.unvectorize(corrp);

%% Tidy up
delete(designFile)
delete(contrastFile)
delete(inputNifti)
